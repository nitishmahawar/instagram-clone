// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  username      String    @unique
  bio           String?
  isVerified    Boolean   @default(false)
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  posts         Post[]
  followedBy    User[]    @relation("UserFollows")
  following     User[]    @relation("UserFollows")
  likedPosts    Like[]
  comments      Comment[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model VerificationToken {
  id          String   @id @default(cuid())
  indentifier String
  token       String   @unique
  expires     DateTime

  @@unique([indentifier, token])
}

model PasswordResetToken {
  id          String   @id @default(cuid())
  indentifier String
  token       String   @unique
  expires     DateTime

  @@unique([indentifier, token])
}

model Post {
  id          String    @id @default(cuid())
  imageUrl    String    @db.Text
  description String?   @db.Text
  authorId    String
  totalLikes  Int       @default(0)
  author      User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  likes       Like[]
  comments    Comment[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([authorId])
}

model Like {
  user   User   @relation(fields: [userId], references: [id])
  userId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String

  @@id([userId, postId])
  @@index([postId])
}

model Comment {
  id        String   @id @default(cuid())
  text      String   @db.Text
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([postId])
}
